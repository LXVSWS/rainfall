the program create a buffer on the stack then put an input from the user inside it
because there is no size limit for the input, we can exploit this program with a buffer overflow to write any data into EIP, but there is a restriction that prevent us to put high located addresses (generally stack addresses) into it
fortunately, the program use strdup to copy our input into the heap, we used ltrace ./level2 to get the address where our input is stored (0x0804a008)
before building our payload we check with a pattern generator the length needed to overflow the buffer (80 bytes), so we build our payload with a shellcode that launch execve("/bin/sh"), fill it until 80 bytes then we put the address returned by strdup into EIP so we will jump to that arbitrary data :
(python -c 'print "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "A" * 52 + "\x08\xa0\x04\x08"' ; cat) | ./level2
because the executable is setuid by level3, when we get the shell we can navigate to level3 home and open the .pass file
